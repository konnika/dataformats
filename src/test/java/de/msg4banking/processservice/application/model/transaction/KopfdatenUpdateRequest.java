/*
 * Geschäfte
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.2.0-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.msg4banking.processservice.application.model.transaction;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;

import java.util.Objects;

/**
 * KopfdatenUpdateRequest
 */
@JsonPropertyOrder({
        KopfdatenUpdateRequest.JSON_PROPERTY_BENUTZERNAME,
        KopfdatenUpdateRequest.JSON_PROPERTY_INSTITUTSNAME,
        KopfdatenUpdateRequest.JSON_PROPERTY_KOPFDATEN,
        KopfdatenUpdateRequest.JSON_PROPERTY_INSTITUTSKRITERIEN
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-13T14:12:50.387795700+02:00[Europe/Berlin]", comments = "Generator version: 7.7.0")
public class KopfdatenUpdateRequest {
    public static final String JSON_PROPERTY_BENUTZERNAME = "benutzername";
    private String benutzername;

    public static final String JSON_PROPERTY_INSTITUTSNAME = "institutsname";
    private String institutsname;

    public static final String JSON_PROPERTY_KOPFDATEN = "kopfdaten";
    private KopfdatenIn kopfdaten;

    public static final String JSON_PROPERTY_INSTITUTSKRITERIEN = "institutskriterien";
    private Institutskriterien institutskriterien;

    public KopfdatenUpdateRequest() {
    }

    public KopfdatenUpdateRequest benutzername(String benutzername) {

        this.benutzername = benutzername;
        return this;
    }

    /**
     * Benutzername des MARZIPAN-Anwenders, mit dem das Update der Kopfdaten durchgeführt werden soll.
     *
     * @return benutzername
     */
    @jakarta.annotation.Nonnull
    @NotNull

    @JsonProperty(JSON_PROPERTY_BENUTZERNAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getBenutzername() {
        return benutzername;
    }


    @JsonProperty(JSON_PROPERTY_BENUTZERNAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBenutzername(String benutzername) {
        this.benutzername = benutzername;
    }

    public KopfdatenUpdateRequest institutsname(String institutsname) {

        this.institutsname = institutsname;
        return this;
    }

    /**
     * Der Name des Instituts. Dieses Element wird nur bei Multimandanten-Betrieb benötigt.
     *
     * @return institutsname
     */
    @jakarta.annotation.Nullable

    @JsonProperty(JSON_PROPERTY_INSTITUTSNAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getInstitutsname() {
        return institutsname;
    }


    @JsonProperty(JSON_PROPERTY_INSTITUTSNAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setInstitutsname(String institutsname) {
        this.institutsname = institutsname;
    }

    public KopfdatenUpdateRequest kopfdaten(KopfdatenIn kopfdaten) {

        this.kopfdaten = kopfdaten;
        return this;
    }

    /**
     * Get kopfdaten
     *
     * @return kopfdaten
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_KOPFDATEN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public KopfdatenIn getKopfdaten() {
        return kopfdaten;
    }


    @JsonProperty(JSON_PROPERTY_KOPFDATEN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setKopfdaten(KopfdatenIn kopfdaten) {
        this.kopfdaten = kopfdaten;
    }

    public KopfdatenUpdateRequest institutskriterien(Institutskriterien institutskriterien) {

        this.institutskriterien = institutskriterien;
        return this;
    }

    /**
     * Get institutskriterien
     *
     * @return institutskriterien
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_INSTITUTSKRITERIEN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Institutskriterien getInstitutskriterien() {
        return institutskriterien;
    }


    @JsonProperty(JSON_PROPERTY_INSTITUTSKRITERIEN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setInstitutskriterien(Institutskriterien institutskriterien) {
        this.institutskriterien = institutskriterien;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        KopfdatenUpdateRequest kopfdatenUpdateRequest = (KopfdatenUpdateRequest) o;
        return Objects.equals(this.benutzername, kopfdatenUpdateRequest.benutzername) &&
                Objects.equals(this.institutsname, kopfdatenUpdateRequest.institutsname) &&
                Objects.equals(this.kopfdaten, kopfdatenUpdateRequest.kopfdaten) &&
                Objects.equals(this.institutskriterien, kopfdatenUpdateRequest.institutskriterien);
    }

    @Override
    public int hashCode() {
        return Objects.hash(benutzername, institutsname, kopfdaten, institutskriterien);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class KopfdatenUpdateRequest {\n");
        sb.append("    benutzername: ").append(toIndentedString(benutzername)).append("\n");
        sb.append("    institutsname: ").append(toIndentedString(institutsname)).append("\n");
        sb.append("    kopfdaten: ").append(toIndentedString(kopfdaten)).append("\n");
        sb.append("    institutskriterien: ").append(toIndentedString(institutskriterien)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

