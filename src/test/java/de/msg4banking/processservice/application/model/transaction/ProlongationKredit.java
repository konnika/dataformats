/*
 * Geschäfte
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.2.0-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.msg4banking.processservice.application.model.transaction;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.Valid;

import java.math.BigDecimal;
import java.util.Objects;

/**
 * ProlongationKredit
 */
@JsonPropertyOrder({
        ProlongationKredit.JSON_PROPERTY_PROLONGATION_AKTIV,
        ProlongationKredit.JSON_PROPERTY_BERECHNUNGSNOMINALE,
        ProlongationKredit.JSON_PROPERTY_NICHT_BEZAHLTER_ZINSBETRAG,
        ProlongationKredit.JSON_PROPERTY_NICHT_VERRECHNETE_RATEN
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-13T14:12:50.387795700+02:00[Europe/Berlin]", comments = "Generator version: 7.7.0")
public class ProlongationKredit {
    public static final String JSON_PROPERTY_PROLONGATION_AKTIV = "prolongationAktiv";
    private Boolean prolongationAktiv;

    public static final String JSON_PROPERTY_BERECHNUNGSNOMINALE = "berechnungsnominale";
    private BigDecimal berechnungsnominale;

    public static final String JSON_PROPERTY_NICHT_BEZAHLTER_ZINSBETRAG = "nichtBezahlterZinsbetrag";
    private BigDecimal nichtBezahlterZinsbetrag;

    public static final String JSON_PROPERTY_NICHT_VERRECHNETE_RATEN = "nichtVerrechneteRaten";
    private BigDecimal nichtVerrechneteRaten;

    public ProlongationKredit() {
    }

    public ProlongationKredit prolongationAktiv(Boolean prolongationAktiv) {

        this.prolongationAktiv = prolongationAktiv;
        return this;
    }

    /**
     * Zeigt an, ob es sich bei dem Geschäft um eine Prolongation handelt.
     *
     * @return prolongationAktiv
     */
    @jakarta.annotation.Nullable

    @JsonProperty(JSON_PROPERTY_PROLONGATION_AKTIV)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Boolean getProlongationAktiv() {
        return prolongationAktiv;
    }


    @JsonProperty(JSON_PROPERTY_PROLONGATION_AKTIV)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProlongationAktiv(Boolean prolongationAktiv) {
        this.prolongationAktiv = prolongationAktiv;
    }

    public ProlongationKredit berechnungsnominale(BigDecimal berechnungsnominale) {

        this.berechnungsnominale = berechnungsnominale;
        return this;
    }

    /**
     * Der ursprüngliche Nominalbetrag des Darlehens.
     *
     * @return berechnungsnominale
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_BERECHNUNGSNOMINALE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getBerechnungsnominale() {
        return berechnungsnominale;
    }


    @JsonProperty(JSON_PROPERTY_BERECHNUNGSNOMINALE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBerechnungsnominale(BigDecimal berechnungsnominale) {
        this.berechnungsnominale = berechnungsnominale;
    }

    public ProlongationKredit nichtBezahlterZinsbetrag(BigDecimal nichtBezahlterZinsbetrag) {

        this.nichtBezahlterZinsbetrag = nichtBezahlterZinsbetrag;
        return this;
    }

    /**
     * Der zum Zeitpunkt der Prolongation noch nicht verrechnete Zins.
     *
     * @return nichtBezahlterZinsbetrag
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_NICHT_BEZAHLTER_ZINSBETRAG)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getNichtBezahlterZinsbetrag() {
        return nichtBezahlterZinsbetrag;
    }


    @JsonProperty(JSON_PROPERTY_NICHT_BEZAHLTER_ZINSBETRAG)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNichtBezahlterZinsbetrag(BigDecimal nichtBezahlterZinsbetrag) {
        this.nichtBezahlterZinsbetrag = nichtBezahlterZinsbetrag;
    }

    public ProlongationKredit nichtVerrechneteRaten(BigDecimal nichtVerrechneteRaten) {

        this.nichtVerrechneteRaten = nichtVerrechneteRaten;
        return this;
    }

    /**
     * Die zum Zeitpunkt der Prolongation noch nicht verrechneten Tilgungen.
     *
     * @return nichtVerrechneteRaten
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_NICHT_VERRECHNETE_RATEN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getNichtVerrechneteRaten() {
        return nichtVerrechneteRaten;
    }


    @JsonProperty(JSON_PROPERTY_NICHT_VERRECHNETE_RATEN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNichtVerrechneteRaten(BigDecimal nichtVerrechneteRaten) {
        this.nichtVerrechneteRaten = nichtVerrechneteRaten;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProlongationKredit prolongationKredit = (ProlongationKredit) o;
        return Objects.equals(this.prolongationAktiv, prolongationKredit.prolongationAktiv) &&
                Objects.equals(this.berechnungsnominale, prolongationKredit.berechnungsnominale) &&
                Objects.equals(this.nichtBezahlterZinsbetrag, prolongationKredit.nichtBezahlterZinsbetrag) &&
                Objects.equals(this.nichtVerrechneteRaten, prolongationKredit.nichtVerrechneteRaten);
    }

    @Override
    public int hashCode() {
        return Objects.hash(prolongationAktiv, berechnungsnominale, nichtBezahlterZinsbetrag, nichtVerrechneteRaten);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ProlongationKredit {\n");
        sb.append("    prolongationAktiv: ").append(toIndentedString(prolongationAktiv)).append("\n");
        sb.append("    berechnungsnominale: ").append(toIndentedString(berechnungsnominale)).append("\n");
        sb.append("    nichtBezahlterZinsbetrag: ").append(toIndentedString(nichtBezahlterZinsbetrag)).append("\n");
        sb.append("    nichtVerrechneteRaten: ").append(toIndentedString(nichtVerrechneteRaten)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

