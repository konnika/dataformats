/*
 * Geschäfte
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.2.0-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.msg4banking.processservice.application.model.transaction;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.Valid;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Objects;

/**
 * TeildeckungsdatenKreditImport
 */
@JsonPropertyOrder({
        TeildeckungsdatenKreditImport.JSON_PROPERTY_ANFAENGLICHE_TILGUNG_GEDECKT,
        TeildeckungsdatenKreditImport.JSON_PROPERTY_AUFTEILUNGSMODUS,
        TeildeckungsdatenKreditImport.JSON_PROPERTY_BELEIHUNGSWERT,
        TeildeckungsdatenKreditImport.JSON_PROPERTY_DECKUNGSSUMME,
        TeildeckungsdatenKreditImport.JSON_PROPERTY_GEDECKTER_ANTEIL_DES_BELEIHUNGSWERTS,
        TeildeckungsdatenKreditImport.JSON_PROPERTY_NICHT_BEZAHLTER_ZINSBETRAG_GEDECKT,
        TeildeckungsdatenKreditImport.JSON_PROPERTY_NICHT_VERRECHNETE_RATEN_GEDECKT,
        TeildeckungsdatenKreditImport.JSON_PROPERTY_RATE_GEDECKT,
        TeildeckungsdatenKreditImport.JSON_PROPERTY_TILGUNGSBEGINN_GEDECKTER_TEIL
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-13T14:12:50.387795700+02:00[Europe/Berlin]", comments = "Generator version: 7.7.0")
public class TeildeckungsdatenKreditImport {
    public static final String JSON_PROPERTY_ANFAENGLICHE_TILGUNG_GEDECKT = "anfaenglicheTilgungGedeckt";
    private BigDecimal anfaenglicheTilgungGedeckt;

    public static final String JSON_PROPERTY_AUFTEILUNGSMODUS = "aufteilungsmodus";
    private Teildeckungsmodus aufteilungsmodus;

    public static final String JSON_PROPERTY_BELEIHUNGSWERT = "beleihungswert";
    private BigDecimal beleihungswert;

    public static final String JSON_PROPERTY_DECKUNGSSUMME = "deckungssumme";
    private BigDecimal deckungssumme;

    public static final String JSON_PROPERTY_GEDECKTER_ANTEIL_DES_BELEIHUNGSWERTS = "gedeckterAnteilDesBeleihungswerts";
    private BigDecimal gedeckterAnteilDesBeleihungswerts;

    public static final String JSON_PROPERTY_NICHT_BEZAHLTER_ZINSBETRAG_GEDECKT = "nichtBezahlterZinsbetragGedeckt";
    private BigDecimal nichtBezahlterZinsbetragGedeckt;

    public static final String JSON_PROPERTY_NICHT_VERRECHNETE_RATEN_GEDECKT = "nichtVerrechneteRatenGedeckt";
    private BigDecimal nichtVerrechneteRatenGedeckt;

    public static final String JSON_PROPERTY_RATE_GEDECKT = "rateGedeckt";
    private BigDecimal rateGedeckt;

    public static final String JSON_PROPERTY_TILGUNGSBEGINN_GEDECKTER_TEIL = "tilgungsbeginnGedeckterTeil";
    private LocalDate tilgungsbeginnGedeckterTeil;

    public TeildeckungsdatenKreditImport() {
    }

    public TeildeckungsdatenKreditImport anfaenglicheTilgungGedeckt(BigDecimal anfaenglicheTilgungGedeckt) {

        this.anfaenglicheTilgungGedeckt = anfaenglicheTilgungGedeckt;
        return this;
    }

    /**
     * Der Tilgungssatz des gedeckten Darlehensteils bezogen auf das Ursprungskapital. Dieser Wert ist nur bei annuitären Kontoführungen relevant.
     *
     * @return anfaenglicheTilgungGedeckt
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_ANFAENGLICHE_TILGUNG_GEDECKT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getAnfaenglicheTilgungGedeckt() {
        return anfaenglicheTilgungGedeckt;
    }


    @JsonProperty(JSON_PROPERTY_ANFAENGLICHE_TILGUNG_GEDECKT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAnfaenglicheTilgungGedeckt(BigDecimal anfaenglicheTilgungGedeckt) {
        this.anfaenglicheTilgungGedeckt = anfaenglicheTilgungGedeckt;
    }

    public TeildeckungsdatenKreditImport aufteilungsmodus(Teildeckungsmodus aufteilungsmodus) {

        this.aufteilungsmodus = aufteilungsmodus;
        return this;
    }

    /**
     * Get aufteilungsmodus
     *
     * @return aufteilungsmodus
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_AUFTEILUNGSMODUS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Teildeckungsmodus getAufteilungsmodus() {
        return aufteilungsmodus;
    }


    @JsonProperty(JSON_PROPERTY_AUFTEILUNGSMODUS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAufteilungsmodus(Teildeckungsmodus aufteilungsmodus) {
        this.aufteilungsmodus = aufteilungsmodus;
    }

    public TeildeckungsdatenKreditImport beleihungswert(BigDecimal beleihungswert) {

        this.beleihungswert = beleihungswert;
        return this;
    }

    /**
     * Der Beleihungswert. Falls die Deckungssumme nicht gesetzt wird, ist dieser Parameter ein Pflichtfeld.
     *
     * @return beleihungswert
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_BELEIHUNGSWERT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getBeleihungswert() {
        return beleihungswert;
    }


    @JsonProperty(JSON_PROPERTY_BELEIHUNGSWERT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBeleihungswert(BigDecimal beleihungswert) {
        this.beleihungswert = beleihungswert;
    }

    public TeildeckungsdatenKreditImport deckungssumme(BigDecimal deckungssumme) {

        this.deckungssumme = deckungssumme;
        return this;
    }

    /**
     * Die Deckungssumme, welche dem Betragswert des gedeckten Anteils des Beleihungswertes entspricht. Wird die Deckungssumme übergeben, darf keine Vorgabe für den Beleihungswert und den gedeckten Anteil des Beleihungswertes gemacht werden.
     *
     * @return deckungssumme
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_DECKUNGSSUMME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getDeckungssumme() {
        return deckungssumme;
    }


    @JsonProperty(JSON_PROPERTY_DECKUNGSSUMME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDeckungssumme(BigDecimal deckungssumme) {
        this.deckungssumme = deckungssumme;
    }

    public TeildeckungsdatenKreditImport gedeckterAnteilDesBeleihungswerts(BigDecimal gedeckterAnteilDesBeleihungswerts) {

        this.gedeckterAnteilDesBeleihungswerts = gedeckterAnteilDesBeleihungswerts;
        return this;
    }

    /**
     * Der gedeckte Anteil des Beleihungswerts. Falls die Deckungssumme nicht gesetzt wird, ist dieser Parameter ein Pflichtfeld.
     *
     * @return gedeckterAnteilDesBeleihungswerts
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_GEDECKTER_ANTEIL_DES_BELEIHUNGSWERTS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getGedeckterAnteilDesBeleihungswerts() {
        return gedeckterAnteilDesBeleihungswerts;
    }


    @JsonProperty(JSON_PROPERTY_GEDECKTER_ANTEIL_DES_BELEIHUNGSWERTS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setGedeckterAnteilDesBeleihungswerts(BigDecimal gedeckterAnteilDesBeleihungswerts) {
        this.gedeckterAnteilDesBeleihungswerts = gedeckterAnteilDesBeleihungswerts;
    }

    public TeildeckungsdatenKreditImport nichtBezahlterZinsbetragGedeckt(BigDecimal nichtBezahlterZinsbetragGedeckt) {

        this.nichtBezahlterZinsbetragGedeckt = nichtBezahlterZinsbetragGedeckt;
        return this;
    }

    /**
     * Der zum Zeitpunkt der Prolongation der noch nicht verrechnete Zins des gedeckten Anteils des Kredits.
     *
     * @return nichtBezahlterZinsbetragGedeckt
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_NICHT_BEZAHLTER_ZINSBETRAG_GEDECKT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getNichtBezahlterZinsbetragGedeckt() {
        return nichtBezahlterZinsbetragGedeckt;
    }


    @JsonProperty(JSON_PROPERTY_NICHT_BEZAHLTER_ZINSBETRAG_GEDECKT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNichtBezahlterZinsbetragGedeckt(BigDecimal nichtBezahlterZinsbetragGedeckt) {
        this.nichtBezahlterZinsbetragGedeckt = nichtBezahlterZinsbetragGedeckt;
    }

    public TeildeckungsdatenKreditImport nichtVerrechneteRatenGedeckt(BigDecimal nichtVerrechneteRatenGedeckt) {

        this.nichtVerrechneteRatenGedeckt = nichtVerrechneteRatenGedeckt;
        return this;
    }

    /**
     * Die zum Zeitpunkt der Prolongation noch nicht verrechneten Tilgungen des gedeckten Anteils des Kredits.
     *
     * @return nichtVerrechneteRatenGedeckt
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_NICHT_VERRECHNETE_RATEN_GEDECKT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getNichtVerrechneteRatenGedeckt() {
        return nichtVerrechneteRatenGedeckt;
    }


    @JsonProperty(JSON_PROPERTY_NICHT_VERRECHNETE_RATEN_GEDECKT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNichtVerrechneteRatenGedeckt(BigDecimal nichtVerrechneteRatenGedeckt) {
        this.nichtVerrechneteRatenGedeckt = nichtVerrechneteRatenGedeckt;
    }

    public TeildeckungsdatenKreditImport rateGedeckt(BigDecimal rateGedeckt) {

        this.rateGedeckt = rateGedeckt;
        return this;
    }

    /**
     * Tilgungsrate des gedeckten Teils. Diese Eingabe ist nur bei Tilgungsdarlehen relevant.
     *
     * @return rateGedeckt
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_RATE_GEDECKT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getRateGedeckt() {
        return rateGedeckt;
    }


    @JsonProperty(JSON_PROPERTY_RATE_GEDECKT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRateGedeckt(BigDecimal rateGedeckt) {
        this.rateGedeckt = rateGedeckt;
    }

    public TeildeckungsdatenKreditImport tilgungsbeginnGedeckterTeil(LocalDate tilgungsbeginnGedeckterTeil) {

        this.tilgungsbeginnGedeckterTeil = tilgungsbeginnGedeckterTeil;
        return this;
    }

    /**
     * Dieses Datum gibt an, ab wann die Tilgung des gedeckten Teils beginnt. Die Tilgung des gedeckten Teils kann früher beginnen, nämlich wenn der ungedeckt Teil schon vor diesem Datum vollständig getilgt wurde.
     *
     * @return tilgungsbeginnGedeckterTeil
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_TILGUNGSBEGINN_GEDECKTER_TEIL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public LocalDate getTilgungsbeginnGedeckterTeil() {
        return tilgungsbeginnGedeckterTeil;
    }


    @JsonProperty(JSON_PROPERTY_TILGUNGSBEGINN_GEDECKTER_TEIL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTilgungsbeginnGedeckterTeil(LocalDate tilgungsbeginnGedeckterTeil) {
        this.tilgungsbeginnGedeckterTeil = tilgungsbeginnGedeckterTeil;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TeildeckungsdatenKreditImport teildeckungsdatenKreditImport = (TeildeckungsdatenKreditImport) o;
        return Objects.equals(this.anfaenglicheTilgungGedeckt, teildeckungsdatenKreditImport.anfaenglicheTilgungGedeckt) &&
                Objects.equals(this.aufteilungsmodus, teildeckungsdatenKreditImport.aufteilungsmodus) &&
                Objects.equals(this.beleihungswert, teildeckungsdatenKreditImport.beleihungswert) &&
                Objects.equals(this.deckungssumme, teildeckungsdatenKreditImport.deckungssumme) &&
                Objects.equals(this.gedeckterAnteilDesBeleihungswerts, teildeckungsdatenKreditImport.gedeckterAnteilDesBeleihungswerts) &&
                Objects.equals(this.nichtBezahlterZinsbetragGedeckt, teildeckungsdatenKreditImport.nichtBezahlterZinsbetragGedeckt) &&
                Objects.equals(this.nichtVerrechneteRatenGedeckt, teildeckungsdatenKreditImport.nichtVerrechneteRatenGedeckt) &&
                Objects.equals(this.rateGedeckt, teildeckungsdatenKreditImport.rateGedeckt) &&
                Objects.equals(this.tilgungsbeginnGedeckterTeil, teildeckungsdatenKreditImport.tilgungsbeginnGedeckterTeil);
    }

    @Override
    public int hashCode() {
        return Objects.hash(anfaenglicheTilgungGedeckt, aufteilungsmodus, beleihungswert, deckungssumme, gedeckterAnteilDesBeleihungswerts, nichtBezahlterZinsbetragGedeckt, nichtVerrechneteRatenGedeckt, rateGedeckt, tilgungsbeginnGedeckterTeil);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TeildeckungsdatenKreditImport {\n");
        sb.append("    anfaenglicheTilgungGedeckt: ").append(toIndentedString(anfaenglicheTilgungGedeckt)).append("\n");
        sb.append("    aufteilungsmodus: ").append(toIndentedString(aufteilungsmodus)).append("\n");
        sb.append("    beleihungswert: ").append(toIndentedString(beleihungswert)).append("\n");
        sb.append("    deckungssumme: ").append(toIndentedString(deckungssumme)).append("\n");
        sb.append("    gedeckterAnteilDesBeleihungswerts: ").append(toIndentedString(gedeckterAnteilDesBeleihungswerts)).append("\n");
        sb.append("    nichtBezahlterZinsbetragGedeckt: ").append(toIndentedString(nichtBezahlterZinsbetragGedeckt)).append("\n");
        sb.append("    nichtVerrechneteRatenGedeckt: ").append(toIndentedString(nichtVerrechneteRatenGedeckt)).append("\n");
        sb.append("    rateGedeckt: ").append(toIndentedString(rateGedeckt)).append("\n");
        sb.append("    tilgungsbeginnGedeckterTeil: ").append(toIndentedString(tilgungsbeginnGedeckterTeil)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

