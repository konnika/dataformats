/*
 * Geschäfte
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.2.0-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.msg4banking.processservice.application.model.transaction;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.Valid;

import java.math.BigDecimal;
import java.util.Objects;

/**
 * Margedaten
 */
@JsonPropertyOrder({
        Margedaten.JSON_PROPERTY_BRUTTOMARGENBARWERT,
        Margedaten.JSON_PROPERTY_BRUTTOMARGE_PROZENT_EFFEKTIV,
        Margedaten.JSON_PROPERTY_EINSTAND_REFI_EFFEKTIV,
        Margedaten.JSON_PROPERTY_EFFEKTIVZINS,
        Margedaten.JSON_PROPERTY_ENTNAHMEART_MARGE_PROZENT_EFFEKTIV,
        Margedaten.JSON_PROPERTY_NETTOMARGENBARWERT,
        Margedaten.JSON_PROPERTY_NETTOMARGE_PROZENT_EFFEKTIV,
        Margedaten.JSON_PROPERTY_PVBP,
        Margedaten.JSON_PROPERTY_BRUTTOMARGE_PROZENT_NOMINAL,
        Margedaten.JSON_PROPERTY_EINSTAND_REFI_NOMINAL,
        Margedaten.JSON_PROPERTY_BEWERTUNGSZINS,
        Margedaten.JSON_PROPERTY_BERECHNUNG_MIT_BEWERTUNGSZINS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-13T14:12:50.387795700+02:00[Europe/Berlin]", comments = "Generator version: 7.7.0")
public class Margedaten {
    public static final String JSON_PROPERTY_BRUTTOMARGENBARWERT = "bruttomargenbarwert";
    private BigDecimal bruttomargenbarwert;

    public static final String JSON_PROPERTY_BRUTTOMARGE_PROZENT_EFFEKTIV = "bruttomargeProzentEffektiv";
    private BigDecimal bruttomargeProzentEffektiv;

    public static final String JSON_PROPERTY_EINSTAND_REFI_EFFEKTIV = "einstandRefiEffektiv";
    private BigDecimal einstandRefiEffektiv;

    public static final String JSON_PROPERTY_EFFEKTIVZINS = "effektivzins";
    private BigDecimal effektivzins;

    public static final String JSON_PROPERTY_ENTNAHMEART_MARGE_PROZENT_EFFEKTIV = "entnahmeartMargeProzentEffektiv";
    private Entnahmeart entnahmeartMargeProzentEffektiv;

    public static final String JSON_PROPERTY_NETTOMARGENBARWERT = "nettomargenbarwert";
    private BigDecimal nettomargenbarwert;

    public static final String JSON_PROPERTY_NETTOMARGE_PROZENT_EFFEKTIV = "nettomargeProzentEffektiv";
    private BigDecimal nettomargeProzentEffektiv;

    public static final String JSON_PROPERTY_PVBP = "pvbp";
    private BigDecimal pvbp;

    public static final String JSON_PROPERTY_BRUTTOMARGE_PROZENT_NOMINAL = "bruttomargeProzentNominal";
    private BigDecimal bruttomargeProzentNominal;

    public static final String JSON_PROPERTY_EINSTAND_REFI_NOMINAL = "einstandRefiNominal";
    private BigDecimal einstandRefiNominal;

    public static final String JSON_PROPERTY_BEWERTUNGSZINS = "bewertungszins";
    private BigDecimal bewertungszins;

    public static final String JSON_PROPERTY_BERECHNUNG_MIT_BEWERTUNGSZINS = "berechnungMitBewertungszins";
    private Boolean berechnungMitBewertungszins;

    public Margedaten() {
    }

    public Margedaten bruttomargenbarwert(BigDecimal bruttomargenbarwert) {

        this.bruttomargenbarwert = bruttomargenbarwert;
        return this;
    }

    /**
     * Der Bruttomargenbarwert bei Entnahme der Marge am Kalkulationsdatum.
     *
     * @return bruttomargenbarwert
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_BRUTTOMARGENBARWERT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getBruttomargenbarwert() {
        return bruttomargenbarwert;
    }


    @JsonProperty(JSON_PROPERTY_BRUTTOMARGENBARWERT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBruttomargenbarwert(BigDecimal bruttomargenbarwert) {
        this.bruttomargenbarwert = bruttomargenbarwert;
    }

    public Margedaten bruttomargeProzentEffektiv(BigDecimal bruttomargeProzentEffektiv) {

        this.bruttomargeProzentEffektiv = bruttomargeProzentEffektiv;
        return this;
    }

    /**
     * Die prozentuale, effektive Bruttomarge des Geschäfts bei laufender Entnahme der Marge über die Laufzeit hinweg.
     *
     * @return bruttomargeProzentEffektiv
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_BRUTTOMARGE_PROZENT_EFFEKTIV)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getBruttomargeProzentEffektiv() {
        return bruttomargeProzentEffektiv;
    }


    @JsonProperty(JSON_PROPERTY_BRUTTOMARGE_PROZENT_EFFEKTIV)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBruttomargeProzentEffektiv(BigDecimal bruttomargeProzentEffektiv) {
        this.bruttomargeProzentEffektiv = bruttomargeProzentEffektiv;
    }

    public Margedaten einstandRefiEffektiv(BigDecimal einstandRefiEffektiv) {

        this.einstandRefiEffektiv = einstandRefiEffektiv;
        return this;
    }

    /**
     * Der Effektivzins der Refinanzierung gemäß ICMA.
     *
     * @return einstandRefiEffektiv
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_EINSTAND_REFI_EFFEKTIV)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getEinstandRefiEffektiv() {
        return einstandRefiEffektiv;
    }


    @JsonProperty(JSON_PROPERTY_EINSTAND_REFI_EFFEKTIV)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setEinstandRefiEffektiv(BigDecimal einstandRefiEffektiv) {
        this.einstandRefiEffektiv = einstandRefiEffektiv;
    }

    public Margedaten effektivzins(BigDecimal effektivzins) {

        this.effektivzins = effektivzins;
        return this;
    }

    /**
     * Der Effektivzins gemäß ICMA.
     *
     * @return effektivzins
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_EFFEKTIVZINS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getEffektivzins() {
        return effektivzins;
    }


    @JsonProperty(JSON_PROPERTY_EFFEKTIVZINS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setEffektivzins(BigDecimal effektivzins) {
        this.effektivzins = effektivzins;
    }

    public Margedaten entnahmeartMargeProzentEffektiv(Entnahmeart entnahmeartMargeProzentEffektiv) {

        this.entnahmeartMargeProzentEffektiv = entnahmeartMargeProzentEffektiv;
        return this;
    }

    /**
     * Get entnahmeartMargeProzentEffektiv
     *
     * @return entnahmeartMargeProzentEffektiv
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_ENTNAHMEART_MARGE_PROZENT_EFFEKTIV)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Entnahmeart getEntnahmeartMargeProzentEffektiv() {
        return entnahmeartMargeProzentEffektiv;
    }


    @JsonProperty(JSON_PROPERTY_ENTNAHMEART_MARGE_PROZENT_EFFEKTIV)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setEntnahmeartMargeProzentEffektiv(Entnahmeart entnahmeartMargeProzentEffektiv) {
        this.entnahmeartMargeProzentEffektiv = entnahmeartMargeProzentEffektiv;
    }

    public Margedaten nettomargenbarwert(BigDecimal nettomargenbarwert) {

        this.nettomargenbarwert = nettomargenbarwert;
        return this;
    }

    /**
     * Der Nettomargenbarwert bei Entnahme der Marge am Kalkulationsdatum.
     *
     * @return nettomargenbarwert
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_NETTOMARGENBARWERT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getNettomargenbarwert() {
        return nettomargenbarwert;
    }


    @JsonProperty(JSON_PROPERTY_NETTOMARGENBARWERT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNettomargenbarwert(BigDecimal nettomargenbarwert) {
        this.nettomargenbarwert = nettomargenbarwert;
    }

    public Margedaten nettomargeProzentEffektiv(BigDecimal nettomargeProzentEffektiv) {

        this.nettomargeProzentEffektiv = nettomargeProzentEffektiv;
        return this;
    }

    /**
     * Die prozentuale Nettomarge des Geschäfts bei laufender Entnahme der Nettomarge über die Laufzeit hinweg.
     *
     * @return nettomargeProzentEffektiv
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_NETTOMARGE_PROZENT_EFFEKTIV)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getNettomargeProzentEffektiv() {
        return nettomargeProzentEffektiv;
    }


    @JsonProperty(JSON_PROPERTY_NETTOMARGE_PROZENT_EFFEKTIV)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNettomargeProzentEffektiv(BigDecimal nettomargeProzentEffektiv) {
        this.nettomargeProzentEffektiv = nettomargeProzentEffektiv;
    }

    public Margedaten pvbp(BigDecimal pvbp) {

        this.pvbp = pvbp;
        return this;
    }

    /**
     * Price Value of a Basis Point
     *
     * @return pvbp
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_PVBP)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getPvbp() {
        return pvbp;
    }


    @JsonProperty(JSON_PROPERTY_PVBP)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPvbp(BigDecimal pvbp) {
        this.pvbp = pvbp;
    }

    public Margedaten bruttomargeProzentNominal(BigDecimal bruttomargeProzentNominal) {

        this.bruttomargeProzentNominal = bruttomargeProzentNominal;
        return this;
    }

    /**
     * Die nominale Marge (in Prozent).
     *
     * @return bruttomargeProzentNominal
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_BRUTTOMARGE_PROZENT_NOMINAL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getBruttomargeProzentNominal() {
        return bruttomargeProzentNominal;
    }


    @JsonProperty(JSON_PROPERTY_BRUTTOMARGE_PROZENT_NOMINAL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBruttomargeProzentNominal(BigDecimal bruttomargeProzentNominal) {
        this.bruttomargeProzentNominal = bruttomargeProzentNominal;
    }

    public Margedaten einstandRefiNominal(BigDecimal einstandRefiNominal) {

        this.einstandRefiNominal = einstandRefiNominal;
        return this;
    }

    /**
     * Der nominale Einstand (in Prozent) bzgl. der Refinanzierungskurve. Spread auf die Refinanzierungskurve.
     *
     * @return einstandRefiNominal
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_EINSTAND_REFI_NOMINAL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getEinstandRefiNominal() {
        return einstandRefiNominal;
    }


    @JsonProperty(JSON_PROPERTY_EINSTAND_REFI_NOMINAL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setEinstandRefiNominal(BigDecimal einstandRefiNominal) {
        this.einstandRefiNominal = einstandRefiNominal;
    }

    public Margedaten bewertungszins(BigDecimal bewertungszins) {

        this.bewertungszins = bewertungszins;
        return this;
    }

    /**
     * Auf Basis des Bewertungszinses (in Prozent) werden die Margenkennzahlen ermittelt. Der Bewertungszins entspricht in gewisser Weise dem Einstandszins bei einem Festzinsdarlehen. Zur Ermittlung des Margenbarwerts wird zusätzlich die aktuelle Zinsstruktur benötigt.
     *
     * @return bewertungszins
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_BEWERTUNGSZINS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getBewertungszins() {
        return bewertungszins;
    }


    @JsonProperty(JSON_PROPERTY_BEWERTUNGSZINS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBewertungszins(BigDecimal bewertungszins) {
        this.bewertungszins = bewertungszins;
    }

    public Margedaten berechnungMitBewertungszins(Boolean berechnungMitBewertungszins) {

        this.berechnungMitBewertungszins = berechnungMitBewertungszins;
        return this;
    }

    /**
     * Gibt an, ob ein Bewertungszins für die Margenrechnung benutzt wird oder nicht.
     *
     * @return berechnungMitBewertungszins
     */
    @jakarta.annotation.Nullable

    @JsonProperty(JSON_PROPERTY_BERECHNUNG_MIT_BEWERTUNGSZINS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Boolean getBerechnungMitBewertungszins() {
        return berechnungMitBewertungszins;
    }


    @JsonProperty(JSON_PROPERTY_BERECHNUNG_MIT_BEWERTUNGSZINS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBerechnungMitBewertungszins(Boolean berechnungMitBewertungszins) {
        this.berechnungMitBewertungszins = berechnungMitBewertungszins;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Margedaten margedaten = (Margedaten) o;
        return Objects.equals(this.bruttomargenbarwert, margedaten.bruttomargenbarwert) &&
                Objects.equals(this.bruttomargeProzentEffektiv, margedaten.bruttomargeProzentEffektiv) &&
                Objects.equals(this.einstandRefiEffektiv, margedaten.einstandRefiEffektiv) &&
                Objects.equals(this.effektivzins, margedaten.effektivzins) &&
                Objects.equals(this.entnahmeartMargeProzentEffektiv, margedaten.entnahmeartMargeProzentEffektiv) &&
                Objects.equals(this.nettomargenbarwert, margedaten.nettomargenbarwert) &&
                Objects.equals(this.nettomargeProzentEffektiv, margedaten.nettomargeProzentEffektiv) &&
                Objects.equals(this.pvbp, margedaten.pvbp) &&
                Objects.equals(this.bruttomargeProzentNominal, margedaten.bruttomargeProzentNominal) &&
                Objects.equals(this.einstandRefiNominal, margedaten.einstandRefiNominal) &&
                Objects.equals(this.bewertungszins, margedaten.bewertungszins) &&
                Objects.equals(this.berechnungMitBewertungszins, margedaten.berechnungMitBewertungszins);
    }

    @Override
    public int hashCode() {
        return Objects.hash(bruttomargenbarwert, bruttomargeProzentEffektiv, einstandRefiEffektiv, effektivzins, entnahmeartMargeProzentEffektiv, nettomargenbarwert, nettomargeProzentEffektiv, pvbp, bruttomargeProzentNominal, einstandRefiNominal, bewertungszins, berechnungMitBewertungszins);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Margedaten {\n");
        sb.append("    bruttomargenbarwert: ").append(toIndentedString(bruttomargenbarwert)).append("\n");
        sb.append("    bruttomargeProzentEffektiv: ").append(toIndentedString(bruttomargeProzentEffektiv)).append("\n");
        sb.append("    einstandRefiEffektiv: ").append(toIndentedString(einstandRefiEffektiv)).append("\n");
        sb.append("    effektivzins: ").append(toIndentedString(effektivzins)).append("\n");
        sb.append("    entnahmeartMargeProzentEffektiv: ").append(toIndentedString(entnahmeartMargeProzentEffektiv)).append("\n");
        sb.append("    nettomargenbarwert: ").append(toIndentedString(nettomargenbarwert)).append("\n");
        sb.append("    nettomargeProzentEffektiv: ").append(toIndentedString(nettomargeProzentEffektiv)).append("\n");
        sb.append("    pvbp: ").append(toIndentedString(pvbp)).append("\n");
        sb.append("    bruttomargeProzentNominal: ").append(toIndentedString(bruttomargeProzentNominal)).append("\n");
        sb.append("    einstandRefiNominal: ").append(toIndentedString(einstandRefiNominal)).append("\n");
        sb.append("    bewertungszins: ").append(toIndentedString(bewertungszins)).append("\n");
        sb.append("    berechnungMitBewertungszins: ").append(toIndentedString(berechnungMitBewertungszins)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

