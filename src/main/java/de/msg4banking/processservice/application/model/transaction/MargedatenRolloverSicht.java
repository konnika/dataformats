/*
 * Geschäfte
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.2.0-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.msg4banking.processservice.application.model.transaction;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.Valid;

import java.math.BigDecimal;
import java.util.Objects;

/**
 * MargedatenRolloverSicht
 */
@JsonPropertyOrder({
        MargedatenRolloverSicht.JSON_PROPERTY_BRUTTOMARGENBARWERT,
        MargedatenRolloverSicht.JSON_PROPERTY_BRUTTOMARGE_PROZENT_EFFEKTIV,
        MargedatenRolloverSicht.JSON_PROPERTY_EFFEKTIVZINS,
        MargedatenRolloverSicht.JSON_PROPERTY_EINSTAND_REFI_EFFEKTIV,
        MargedatenRolloverSicht.JSON_PROPERTY_NETTOMARGENBARWERT,
        MargedatenRolloverSicht.JSON_PROPERTY_NETTOMARGE_PROZENT_EFFEKTIV,
        MargedatenRolloverSicht.JSON_PROPERTY_PVBP,
        MargedatenRolloverSicht.JSON_PROPERTY_BRUTTOMARGE_PROZENT_NOMINAL,
        MargedatenRolloverSicht.JSON_PROPERTY_SPREAD_AUF_REFIKURVE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-13T14:12:50.387795700+02:00[Europe/Berlin]", comments = "Generator version: 7.7.0")
public class MargedatenRolloverSicht {
    public static final String JSON_PROPERTY_BRUTTOMARGENBARWERT = "bruttomargenbarwert";
    private BigDecimal bruttomargenbarwert;

    public static final String JSON_PROPERTY_BRUTTOMARGE_PROZENT_EFFEKTIV = "bruttomargeProzentEffektiv";
    private BigDecimal bruttomargeProzentEffektiv;

    public static final String JSON_PROPERTY_EFFEKTIVZINS = "effektivzins";
    private BigDecimal effektivzins;

    public static final String JSON_PROPERTY_EINSTAND_REFI_EFFEKTIV = "einstandRefiEffektiv";
    private BigDecimal einstandRefiEffektiv;

    public static final String JSON_PROPERTY_NETTOMARGENBARWERT = "nettomargenbarwert";
    private BigDecimal nettomargenbarwert;

    public static final String JSON_PROPERTY_NETTOMARGE_PROZENT_EFFEKTIV = "nettomargeProzentEffektiv";
    private BigDecimal nettomargeProzentEffektiv;

    public static final String JSON_PROPERTY_PVBP = "pvbp";
    private BigDecimal pvbp;

    public static final String JSON_PROPERTY_BRUTTOMARGE_PROZENT_NOMINAL = "bruttomargeProzentNominal";
    private BigDecimal bruttomargeProzentNominal;

    public static final String JSON_PROPERTY_SPREAD_AUF_REFIKURVE = "spreadAufRefikurve";
    private BigDecimal spreadAufRefikurve;

    public MargedatenRolloverSicht() {
    }

    public MargedatenRolloverSicht bruttomargenbarwert(BigDecimal bruttomargenbarwert) {

        this.bruttomargenbarwert = bruttomargenbarwert;
        return this;
    }

    /**
     * Der Bruttomargenbarwert bei Entnahme der Marge am Kalkulationsdatum.
     *
     * @return bruttomargenbarwert
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_BRUTTOMARGENBARWERT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getBruttomargenbarwert() {
        return bruttomargenbarwert;
    }


    @JsonProperty(JSON_PROPERTY_BRUTTOMARGENBARWERT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBruttomargenbarwert(BigDecimal bruttomargenbarwert) {
        this.bruttomargenbarwert = bruttomargenbarwert;
    }

    public MargedatenRolloverSicht bruttomargeProzentEffektiv(BigDecimal bruttomargeProzentEffektiv) {

        this.bruttomargeProzentEffektiv = bruttomargeProzentEffektiv;
        return this;
    }

    /**
     * Die prozentuale, effektive Bruttomarge des Geschäfts bei laufender Entnahme der Marge über die Laufzeit hinweg.
     *
     * @return bruttomargeProzentEffektiv
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_BRUTTOMARGE_PROZENT_EFFEKTIV)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getBruttomargeProzentEffektiv() {
        return bruttomargeProzentEffektiv;
    }


    @JsonProperty(JSON_PROPERTY_BRUTTOMARGE_PROZENT_EFFEKTIV)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBruttomargeProzentEffektiv(BigDecimal bruttomargeProzentEffektiv) {
        this.bruttomargeProzentEffektiv = bruttomargeProzentEffektiv;
    }

    public MargedatenRolloverSicht effektivzins(BigDecimal effektivzins) {

        this.effektivzins = effektivzins;
        return this;
    }

    /**
     * Der Effektivzins gemäß ICMA.
     *
     * @return effektivzins
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_EFFEKTIVZINS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getEffektivzins() {
        return effektivzins;
    }


    @JsonProperty(JSON_PROPERTY_EFFEKTIVZINS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setEffektivzins(BigDecimal effektivzins) {
        this.effektivzins = effektivzins;
    }

    public MargedatenRolloverSicht einstandRefiEffektiv(BigDecimal einstandRefiEffektiv) {

        this.einstandRefiEffektiv = einstandRefiEffektiv;
        return this;
    }

    /**
     * Der Effektivzins der Refinanzierung gemäß ICMA.
     *
     * @return einstandRefiEffektiv
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_EINSTAND_REFI_EFFEKTIV)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getEinstandRefiEffektiv() {
        return einstandRefiEffektiv;
    }


    @JsonProperty(JSON_PROPERTY_EINSTAND_REFI_EFFEKTIV)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setEinstandRefiEffektiv(BigDecimal einstandRefiEffektiv) {
        this.einstandRefiEffektiv = einstandRefiEffektiv;
    }

    public MargedatenRolloverSicht nettomargenbarwert(BigDecimal nettomargenbarwert) {

        this.nettomargenbarwert = nettomargenbarwert;
        return this;
    }

    /**
     * Der Nettomargenbarwert bei Entnahme der Marge am Kalkulationsdatum.
     *
     * @return nettomargenbarwert
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_NETTOMARGENBARWERT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getNettomargenbarwert() {
        return nettomargenbarwert;
    }


    @JsonProperty(JSON_PROPERTY_NETTOMARGENBARWERT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNettomargenbarwert(BigDecimal nettomargenbarwert) {
        this.nettomargenbarwert = nettomargenbarwert;
    }

    public MargedatenRolloverSicht nettomargeProzentEffektiv(BigDecimal nettomargeProzentEffektiv) {

        this.nettomargeProzentEffektiv = nettomargeProzentEffektiv;
        return this;
    }

    /**
     * Die prozentuale Nettomarge des Geschäfts bei laufender Entnahme der Nettomarge über die Laufzeit hinweg.
     *
     * @return nettomargeProzentEffektiv
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_NETTOMARGE_PROZENT_EFFEKTIV)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getNettomargeProzentEffektiv() {
        return nettomargeProzentEffektiv;
    }


    @JsonProperty(JSON_PROPERTY_NETTOMARGE_PROZENT_EFFEKTIV)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNettomargeProzentEffektiv(BigDecimal nettomargeProzentEffektiv) {
        this.nettomargeProzentEffektiv = nettomargeProzentEffektiv;
    }

    public MargedatenRolloverSicht pvbp(BigDecimal pvbp) {

        this.pvbp = pvbp;
        return this;
    }

    /**
     * Price Value of a Basis Point
     *
     * @return pvbp
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_PVBP)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getPvbp() {
        return pvbp;
    }


    @JsonProperty(JSON_PROPERTY_PVBP)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPvbp(BigDecimal pvbp) {
        this.pvbp = pvbp;
    }

    public MargedatenRolloverSicht bruttomargeProzentNominal(BigDecimal bruttomargeProzentNominal) {

        this.bruttomargeProzentNominal = bruttomargeProzentNominal;
        return this;
    }

    /**
     * Die nominale Marge (in Prozent).
     *
     * @return bruttomargeProzentNominal
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_BRUTTOMARGE_PROZENT_NOMINAL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getBruttomargeProzentNominal() {
        return bruttomargeProzentNominal;
    }


    @JsonProperty(JSON_PROPERTY_BRUTTOMARGE_PROZENT_NOMINAL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBruttomargeProzentNominal(BigDecimal bruttomargeProzentNominal) {
        this.bruttomargeProzentNominal = bruttomargeProzentNominal;
    }

    public MargedatenRolloverSicht spreadAufRefikurve(BigDecimal spreadAufRefikurve) {

        this.spreadAufRefikurve = spreadAufRefikurve;
        return this;
    }

    /**
     * Der nominale Einstand (in Prozent) bzgl. der Refinanzierungskurve. Spread auf die Refinanzierungskurve.
     *
     * @return spreadAufRefikurve
     */
    @jakarta.annotation.Nullable
    @Valid

    @JsonProperty(JSON_PROPERTY_SPREAD_AUF_REFIKURVE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public BigDecimal getSpreadAufRefikurve() {
        return spreadAufRefikurve;
    }


    @JsonProperty(JSON_PROPERTY_SPREAD_AUF_REFIKURVE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSpreadAufRefikurve(BigDecimal spreadAufRefikurve) {
        this.spreadAufRefikurve = spreadAufRefikurve;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MargedatenRolloverSicht margedatenRolloverSicht = (MargedatenRolloverSicht) o;
        return Objects.equals(this.bruttomargenbarwert, margedatenRolloverSicht.bruttomargenbarwert) &&
                Objects.equals(this.bruttomargeProzentEffektiv, margedatenRolloverSicht.bruttomargeProzentEffektiv) &&
                Objects.equals(this.effektivzins, margedatenRolloverSicht.effektivzins) &&
                Objects.equals(this.einstandRefiEffektiv, margedatenRolloverSicht.einstandRefiEffektiv) &&
                Objects.equals(this.nettomargenbarwert, margedatenRolloverSicht.nettomargenbarwert) &&
                Objects.equals(this.nettomargeProzentEffektiv, margedatenRolloverSicht.nettomargeProzentEffektiv) &&
                Objects.equals(this.pvbp, margedatenRolloverSicht.pvbp) &&
                Objects.equals(this.bruttomargeProzentNominal, margedatenRolloverSicht.bruttomargeProzentNominal) &&
                Objects.equals(this.spreadAufRefikurve, margedatenRolloverSicht.spreadAufRefikurve);
    }

    @Override
    public int hashCode() {
        return Objects.hash(bruttomargenbarwert, bruttomargeProzentEffektiv, effektivzins, einstandRefiEffektiv, nettomargenbarwert, nettomargeProzentEffektiv, pvbp, bruttomargeProzentNominal, spreadAufRefikurve);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class MargedatenRolloverSicht {\n");
        sb.append("    bruttomargenbarwert: ").append(toIndentedString(bruttomargenbarwert)).append("\n");
        sb.append("    bruttomargeProzentEffektiv: ").append(toIndentedString(bruttomargeProzentEffektiv)).append("\n");
        sb.append("    effektivzins: ").append(toIndentedString(effektivzins)).append("\n");
        sb.append("    einstandRefiEffektiv: ").append(toIndentedString(einstandRefiEffektiv)).append("\n");
        sb.append("    nettomargenbarwert: ").append(toIndentedString(nettomargenbarwert)).append("\n");
        sb.append("    nettomargeProzentEffektiv: ").append(toIndentedString(nettomargeProzentEffektiv)).append("\n");
        sb.append("    pvbp: ").append(toIndentedString(pvbp)).append("\n");
        sb.append("    bruttomargeProzentNominal: ").append(toIndentedString(bruttomargeProzentNominal)).append("\n");
        sb.append("    spreadAufRefikurve: ").append(toIndentedString(spreadAufRefikurve)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

